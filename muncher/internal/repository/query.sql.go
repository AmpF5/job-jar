// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: query.sql

package repository

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type CreatSkilSnapshotsParams struct {
	SkillSnapshotID uuid.UUID
	Name            string
	OfferIds        []uuid.UUID
}

const createCompanySnapshot = `-- name: CreateCompanySnapshot :exec
INSERT INTO company_snapshots(company_snapshot_id, name, offer_ids)
VALUES($1, $2, $3)
`

type CreateCompanySnapshotParams struct {
	CompanySnapshotID uuid.UUID
	Name              string
	OfferIds          []uuid.UUID
}

// :::: COMPANY_SNAPSHOTS::::
func (q *Queries) CreateCompanySnapshot(ctx context.Context, arg CreateCompanySnapshotParams) error {
	_, err := q.db.Exec(ctx, createCompanySnapshot, arg.CompanySnapshotID, arg.Name, arg.OfferIds)
	return err
}

type CreateOfferParams struct {
	OfferID         uuid.UUID
	ExternalID      uuid.UUID
	Title           string
	JobSite         string
	ExperienceLevel string
	WorkplaceType   string
	OfferStatus     string
	CompanyID       uuid.UUID
	MinimalWage     float32
	MaximalWage     float32
	Slug            string
	ExpiredAt       pgtype.Timestamptz
	PublishedAt     pgtype.Timestamptz
}

const createSkillSnapshot = `-- name: CreateSkillSnapshot :exec
INSERT INTO skill_snapshots(skill_snapshot_id, name, offer_ids)
VALUES($1, $2, $3)
`

type CreateSkillSnapshotParams struct {
	SkillSnapshotID uuid.UUID
	Name            string
	OfferIds        []uuid.UUID
}

// :::: SKILL_SNAPSHOTS ::::
func (q *Queries) CreateSkillSnapshot(ctx context.Context, arg CreateSkillSnapshotParams) error {
	_, err := q.db.Exec(ctx, createSkillSnapshot, arg.SkillSnapshotID, arg.Name, arg.OfferIds)
	return err
}

const getByName = `-- name: GetByName :many
SELECT skill_snapshot_id, name, offer_ids FROM skill_snapshots
WHERE (name = ANY ($1::text[]))
`

func (q *Queries) GetByName(ctx context.Context, names []string) ([]SkillSnapshot, error) {
	rows, err := q.db.Query(ctx, getByName, names)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SkillSnapshot
	for rows.Next() {
		var i SkillSnapshot
		if err := rows.Scan(&i.SkillSnapshotID, &i.Name, &i.OfferIds); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getByVariant = `-- name: GetByVariant :one
SELECT skill_id, name, variants FROM skills
WHERE ($1 = ANY (variants)) LIMIT 1
`

// :::: SKILLS ::::
func (q *Queries) GetByVariant(ctx context.Context, variants []string) (Skill, error) {
	row := q.db.QueryRow(ctx, getByVariant, variants)
	var i Skill
	err := row.Scan(&i.SkillID, &i.Name, &i.Variants)
	return i, err
}

const getByVariants = `-- name: GetByVariants :many
SELECT skill_id, name, variants FROM skills
WHERE variants @> ARRAY[$1]
`

// SELECT * FROM skills WHERE($1 = ANY (variants));
func (q *Queries) GetByVariants(ctx context.Context, variants []string) ([]Skill, error) {
	rows, err := q.db.Query(ctx, getByVariants, variants)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Skill
	for rows.Next() {
		var i Skill
		if err := rows.Scan(&i.SkillID, &i.Name, &i.Variants); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
