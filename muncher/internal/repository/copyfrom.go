// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: copyfrom.go

package repository

import (
	"context"
)

// iteratorForCreatSkilSnapshots implements pgx.CopyFromSource.
type iteratorForCreatSkilSnapshots struct {
	rows                 []CreatSkilSnapshotsParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreatSkilSnapshots) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreatSkilSnapshots) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].SkillSnapshotID,
		r.rows[0].Name,
		r.rows[0].OfferIds,
	}, nil
}

func (r iteratorForCreatSkilSnapshots) Err() error {
	return nil
}

func (q *Queries) CreatSkilSnapshots(ctx context.Context, arg []CreatSkilSnapshotsParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"skill_snapshots"}, []string{"skill_snapshot_id", "name", "offer_ids"}, &iteratorForCreatSkilSnapshots{rows: arg})
}

// iteratorForCreateOffer implements pgx.CopyFromSource.
type iteratorForCreateOffer struct {
	rows                 []CreateOfferParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateOffer) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateOffer) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].OfferID,
		r.rows[0].ExternalID,
		r.rows[0].Title,
		r.rows[0].JobSite,
		r.rows[0].ExperienceLevel,
		r.rows[0].WorkplaceType,
		r.rows[0].OfferStatus,
		r.rows[0].CompanyID,
		r.rows[0].MinimalWage,
		r.rows[0].MaximalWage,
		r.rows[0].Slug,
		r.rows[0].ExpiredAt,
		r.rows[0].PublishedAt,
	}, nil
}

func (r iteratorForCreateOffer) Err() error {
	return nil
}

// :::: OFFER ::::
func (q *Queries) CreateOffer(ctx context.Context, arg []CreateOfferParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"offers"}, []string{"offer_id", "external_id", "title", "job_site", "experience_level", "workplace_type", "offer_status", "company_id", "minimal_wage", "maximal_wage", "slug", "expired_at", "published_at"}, &iteratorForCreateOffer{rows: arg})
}
